function [wandO1,wandO2,wandO3,wandX1,wandX2,wandX3,wandX4,wandX5,wandX6,wandY11,wandY12,wandY13,wandY21,wandY22,wandY23,Tracker1,Tracker2,Tracker3,Tracker4,Tracker5,Tracker6,Tracker7] = importfile(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as column vectors.
%   [WANDO1,WANDO2,WANDO3,WANDX1,WANDX2,WANDX3,WANDX4,WANDX5,WANDX6,WANDY11,WANDY12,WANDY13,WANDY21,WANDY22,WANDY23,TRACKER1,TRACKER2,TRACKER3,TRACKER4,TRACKER5,TRACKER6,TRACKER7]
%   = IMPORTFILE(FILENAME) Reads data from text file FILENAME for the
%   default selection.
%
%   [WANDO1,WANDO2,WANDO3,WANDX1,WANDX2,WANDX3,WANDX4,WANDX5,WANDX6,WANDY11,WANDY12,WANDY13,WANDY21,WANDY22,WANDY23,TRACKER1,TRACKER2,TRACKER3,TRACKER4,TRACKER5,TRACKER6,TRACKER7]
%   = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from rows STARTROW
%   through ENDROW of text file FILENAME.
%
% Example:
%   [wandO1,wandO2,wandO3,wandX1,wandX2,wandX3,wandX4,wandX5,wandX6,wandY11,wandY12,wandY13,wandY21,wandY22,wandY23,Tracker1,Tracker2,Tracker3,Tracker4,Tracker5,Tracker6,Tracker7] = importfile('test_translation.txt',3, 1492);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2017/06/30 17:08:12

%% Initialize variables.
delimiter = '\t';
if nargin<=2
    startRow = 3;
    endRow = inf;
end

%% Format for each line of text:
%   column1: double (%f)
%	column2: double (%f)
%   column3: double (%f)
%	column4: double (%f)
%   column5: double (%f)
%	column6: double (%f)
%   column7: double (%f)
%	column8: double (%f)
%   column9: double (%f)
%	column10: double (%f)
%   column11: double (%f)
%	column12: double (%f)
%   column13: double (%f)
%	column14: double (%f)
%   column15: double (%f)
%	column16: double (%f)
%   column17: double (%f)
%	column18: double (%f)
%   column19: double (%f)
%	column20: double (%f)
%   column21: double (%f)
%	column22: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
textscan(fileID, '%[^\n\r]', startRow(1)-1, 'WhiteSpace', '', 'ReturnOnError', false);
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
    frewind(fileID);
    textscan(fileID, '%[^\n\r]', startRow(block)-1, 'WhiteSpace', '', 'ReturnOnError', false);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Allocate imported array to column variable names
wandO1 = dataArray{:, 1};
wandO2 = dataArray{:, 2};
wandO3 = dataArray{:, 3};
wandX1 = dataArray{:, 4};
wandX2 = dataArray{:, 5};
wandX3 = dataArray{:, 6};
wandX4 = dataArray{:, 7};
wandX5 = dataArray{:, 8};
wandX6 = dataArray{:, 9};
wandY11 = dataArray{:, 10};
wandY12 = dataArray{:, 11};
wandY13 = dataArray{:, 12};
wandY21 = dataArray{:, 13};
wandY22 = dataArray{:, 14};
wandY23 = dataArray{:, 15};
Tracker1 = dataArray{:, 16};
Tracker2 = dataArray{:, 17};
Tracker3 = dataArray{:, 18};
Tracker4 = dataArray{:, 19};
Tracker5 = dataArray{:, 20};
Tracker6 = dataArray{:, 21};
Tracker7 = dataArray{:, 22};


